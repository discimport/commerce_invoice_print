<?php
/**
 * Implements hook_menu().
 */
function commerce_invoice_receipt_menu() {
  $items = array();
  
  $items['admin/commerce/orders/%commerce_order/invoice'] = array(
    'title' => 'Invoice',
    'page callback' => 'commerce_invoice_receipt_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_invoice_receipt.admin.inc'
  );

  $items['admin/commerce/orders/%commerce_order/invoice/view'] = array(
    'title' => 'View Invoice',
    'page callback' => 'commerce_invoice_receipt_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'parent' => 'admin/commerce/orders/%commerce_order/invoice',
    'weight' => 0,
    'file' => 'commerce_invoice_receipt.admin.inc',
  );

  $items['admin/commerce/orders/%commerce_order/invoice/print'] = array(
    'title' => 'Printable Invoice',
    'page callback' => 'commerce_invoice_receipt_view_print',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'parent' => 'admin/commerce/orders/%commerce_order/invoice',
    'file' => 'commerce_invoice_receipt.admin.inc',
  );

  $items['admin/commerce/orders/%commerce_order/invoice/mail'] = array(
    'title' => 'Mail Invoice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_invoice_receipt_mail_form', 3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'parent' => 'admin/commerce/orders/%commerce_order/invoice',
    'file' => 'commerce_invoice_receipt.admin.inc',
  );
  
  return $items;
}

/**
 * Generate an array for rendering the given order.
 *
 * @param $order
 *   A fully loaded order object.
 * @param $view_mode
 *   The view mode for displaying the order, 'invoice'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_invoice_receipt_view($order, $view_mode = 'invoice', $breadcrumb = TRUE) {
  drupal_add_css(drupal_get_path('module', 'commerce_invoice_receipt') . '/theme/commerce_invoice_receipt.css');

  return entity_view('commerce_order', array($order->order_id => $order), $view_mode, NULL, TRUE);
}

function commerce_invoice_receipt_view_print($order, $view_mode = 'invoice', $breadcrumb = TRUE) {
  $styles[] = array(
    'type' => 'file',
    'media' => 'all',
    'data' => drupal_get_path('module', 'commerce_invoice_receipt') . '/theme/commerce_invoice_receipt.css',
    'group' => CSS_DEFAULT,
    'every_page' => FALSE,
    'weight' => 0,
    'preprocess' => FALSE,
    'browsers' => array(),
  );
  $html = drupal_get_css($styles);
  
  $build = entity_view('commerce_order', array($order->order_id => $order), $view_mode, NULL, TRUE);
  
  $invoice_info = _commerce_invoice_receipt_get_invoice_info($order, $build);
  
  $html .= theme('commerce_order_invoice_view', array('info' => $invoice_info, 'order' => $order));
  
  print _emogrifier_process($html, NULL, NULL, NULL, NULL, NULL);
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_invoice_receipt_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['view modes']['invoice'] = array(
    'label' => t('Invoice/Receipt'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_theme().
*/
function commerce_invoice_receipt_theme() {
  return array(
    'commerce_order_invoice_view' => array(
      'variables' => array('info' => NULL, 'order' => NULL),
      'path' => drupal_get_path('module', 'commerce_invoice_receipt') . '/theme',
      'template' => 'commerce-order-invoice-view',
    ),
  );
}

/**
* Implements hook_mail().
*/
function commerce_invoice_receipt_mail($key, &$message, $params) {
  $langcode = isset($message['language']) ? $message['language']->language : NULL;
  $options = array(
    'langcode' => $langcode,
    'context' => '',
  );

  switch($key) {
    // Setup an e-mailed invoice.
    case 'invoice':
      $styles[] = array(
        'type' => 'file',
        'media' => 'all',
        'data' => drupal_get_path('module', 'commerce_invoice_receipt') . '/theme/commerce_invoice_receipt.css',
        'group' => CSS_DEFAULT,
        'every_page' => FALSE,
        'weight' => 0,
        'preprocess' => FALSE,
        'browsers' => array(),
      );
      $html = drupal_get_css($styles);
      
      $build = entity_view('commerce_order', array($params['order']->order_id => $params['order']), 'administrator', NULL, TRUE);
      $invoice_info = _commerce_invoice_receipt_get_invoice_info($params['order'], $build);
      
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed;';
      $message['subject'] = isset($params['subject']) ? $params['subject'] : t('Your Order Invoice', array(), $options);
      
      $html .= theme('commerce_order_invoice_view', array('info' => $invoice_info, 'order' => $params['order']));
      
      $message['body'][] = _emogrifier_process($html, NULL, NULL, NULL, NULL, NULL);
      break;
  }
}

/**
 * Implements hook_rules_action_info().
 */
function commerce_invoice_receipt_rules_action_info() {
  $actions = array();

  $actions['commerce_invoice_receipt_send_invoice'] = array(
    'label' => t('Sends the invoice email'),
    'arguments' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Order'),
      ),
      'invoice_mail_settings' => array(
        'type' => 'commerce_invoice_receipt_settings',
        'restriction' => 'input',
        'label' => t('Invoice mail settings'),
      ),
    ),
    'group' => t('Commerce Order'),
  );

  return $actions;
}

/**
 * Implements hook_rules_file_info().
 */
function commerce_invoice_receipt_rules_file_info() {
  return array('commerce_invoice_receipt.admin');
}

/**
 * Implements hook_rules_data_info().
 */
function commerce_invoice_receipt_rules_data_info() {
  $data['commerce_invoice_receipt_settings'] = array(
      'label' => t('Invoice mail settings'),
      'ui class' => 'RulesDataUIInvoiceSettings',
  );
  return $data;
}

/**
 * This class is the implementation of the form for the e-mail invoice send action.
 */
class RulesDataUIInvoiceSettings extends RulesDataUI implements RulesDataDirectInputFormInterface {
  public static function getDefaultMode() {
    return 'input';
  }

  public static function inputForm($name, $info, $settings, RulesPlugin $element) {

    $form[$name]['from'] = array(
      '#type' => 'textfield',
      '#title' => t('Sender'),
      '#default_value' => isset($settings['invoice_mail_settings']['from']) ? $settings['invoice_mail_settings']['from'] : variable_get('site_mail', ''),
      '#description' => t('The "From" address.'),
      '#required' => TRUE,
    );
    
    $form[$name]['addresses'] = array(
      '#type' => 'textarea',
      '#title' => t('Recipients'),
      '#default_value' => isset($settings['invoice_mail_settings']['addresses']) ? $settings['invoice_mail_settings']['addresses'] : '',
      '#description' => t('Enter the email addresses to receive the notifications, one on each line. You may use order tokens for dynamic email addresses.'),
      '#required' => TRUE,
    );

    $langcode = isset($message['language']) ? $message['language']->language : NULL;
    $options = array(
      'langcode' => $langcode,
      'context' => '',
    );
    $form[$name]['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => isset($settings['invoice_mail_settings']['subject']) ? $settings['invoice_mail_settings']['subject'] : t('Your Order Invoice', array(), $options),
      '#required' => TRUE,
    );
    return $form;
  }

  public static function render($value) {
    return array();
  }
}
